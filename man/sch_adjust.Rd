% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sch-adjust.R
\name{sch_adjust}
\alias{sch_adjust}
\title{Adjust a vector of dates}
\usage{
sch_adjust(x, schedule, adjustment = days(1))
}
\arguments{
\item{x}{\code{[Date]}

A vector of dates.}

\item{schedule}{\code{[schedule / event]}

A schedule or event.}

\item{adjustment}{\code{[Period(1) / integer(1) / function / formula]}

An adjustment to make whenever a date falls on an event.

If this is a lubridate period object, such as \code{\link[lubridate:days]{lubridate::days()}},
or an integer, then the adjustment is applied as \code{x + adjustment}.

If this is a function or formula (i.e., a lambda function), then it
should accept 1 argument, the dates to adjust, and should return a \code{Date}
vector of the same size as the original input.}
}
\description{
\code{sch_adjust()} takes an existing vector of dates and shifts it by applying
an \code{adjustment} whenever a date in \code{x} is also an event defined by
the \code{schedule}.
}
\examples{
library(lubridate, warn.conflicts = FALSE)

# The first of the month is an "event" so we have to adjust
# our current date to avoid that.
sch_adjust("2019-01-01", on_mday(1))

# The adjustment could also be backwards
sch_adjust("2019-01-01", on_mday(1), adjustment = -days(1))

# Adjustments are applied repeatedly until the next non-event can be found
# Here, 2019-01-01 is an event, so we move to 2019-01-02, but that is an
# event too, so we move to 2019-01-03
sch_adjust("2019-01-01", on_mday(1:2))

}
